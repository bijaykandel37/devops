input {
      s3 {
		bucket => "avid-services-dev-albaccesslogsaviddev54a8eb1a-10h9esxa8zl9u"
		prefix => "alb"
        type => "elblogs"
		region => "eu-west-2"
		secret_access_key => "aws_secret_key"
		access_key_id => "aws_key_id"
          "additional_settings" => {
              "force_path_style" => true
              "follow_redirects" => false
              }
            }
          }

filter {
	if [type] == "elblogs" {
	grok {
		match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb_name} %{IP:elb_client_ip}:%{INT:elb_client_port:int} (?:%{IP:elb_backend_ip}:%{NUMBER:elb_backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{INT:elb_status_code:int}|-) (?:%{INT:backend_status_code:int}|-) %{INT:elb_received_bytes:int} %{INT:elb_sent_bytes:int} \"(?:%{GREEDYDATA:elb_request}|-)\" \"(?:%{GREEDYDATA:userAgent}|-)\" %{NOTSPACE:elb_sslcipher} %{NOTSPACE:elb_sslprotocol}"]
	match => ["message", "%{GREEDYDATA:event_name} for ELB: %{NOTSPACE:elb_name} at %{TIMESTAMP_ISO8601:timestamp}"]
	}
	if [elb_request] =~ /.+/ {
		grok {
		match => ["elb_request", "(?:%{WORD:http_method}) (?:%{DATA:http_path})? (?:%{DATA:http_type}/%{NUMBER:http_version:float})?|%{GREEDYDATA:rawrequest}"]
		}
	}
	if [http_path] =~ /.+/ {
		grok {
		match => ["http_path", "(?:%{WORD:http_path_protocol}://)?(%{NOTSPACE:http_path_site}:)?(?:%{NUMBER:http_path_port:int})?(?:%{GREEDYDATA:http_path_url})?"]
		}
	}
	geoip {
		source => "elb_client_ip"
		target => "geoip"
		}
	}
	date {
		match => [ "timestamp", "ISO8601" ]
		}
}

output {
   stdout { codec => rubydebug }
   elasticsearch {
        hosts => "elasticsearch:9200"
		user => "elastic"
		password => "elasticpassword"
        index => "s3logs-%{+YYYY.MM.dd}"
    }
}
