upstream vaultwarden-default {
  zone vaultwarden-default 64k;
  server 127.0.0.1:8200;
  keepalive 2;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      "";
}

server {
      server_name vault.mydomain.com;

	# logging
      access_log /var/log/nginx/vault-access_log;
      error_log /var/log/nginx/vault-error_log;
        
	# Including Security Headers
     add_header Strict-Transport-Security "max-age=31536000; includeSubdomains" always;
     add_header X-XSS-Protection "1; mode=block" always;
     add_header X-Content-Type-Options "nosniff" always;
     add_header Referrer-Policy "no-referrer-when-downgrade";
     add_header X-Permitted-Cross-Domain-Policies master-only;
     add_header Permissions-Policy "camera=(); speaker=();";
	     
     #include conf.d/custom/blacklist.conf; 

	# Disallowing bots to crawl
       if ($bad_bot) { return 444; }
           location /robots.txt {
    	   return 200 "User-agent: *\nDisallow: /\n";
      }    

 	  add_header Permissions-Policy        "interest-cohort=()" always;

      location / {
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection $connection_upgrade;
     
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
     
           proxy_pass http://vaultwarden-default;
       }
       
	   location /portainer/ {
	           proxy_http_version 1.1;
	           proxy_set_header Connection "";
	           proxy_pass http://127.0.0.1:9000/;
	           proxy_set_header Host $host;
	           proxy_set_header X-Real-IP $remote_addr;
	           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	   }
	   
	   location /portainer/api/websocket/ {
	           proxy_set_header Upgrade $http_upgrade;
	           proxy_set_header Connection "upgrade";
	           proxy_http_version 1.1;
	           proxy_pass http://127.0.0.1:9000/api/websocket/;
	   }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/vault.mydomain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/vault.mydomain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    if ($host = vault.mydomain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name vault.mydomain.com;

	listen 80;
    return 404; # managed by Certbot


}
